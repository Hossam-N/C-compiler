Terminals unused in grammar

    PRINTF
    SCANF
    REPEAT
    UNTIL
    NOT
    INCLUDE
    END


Grammar

    0 $accept: program $end

    1 program: statement
    2        | program statement
    3        | error SEMICOLON

    4 statement: if_statement
    5          | switch_statement
    6          | iteration_statement
    7          | function_call_statement
    8          | CONTINUE SEMICOLON
    9          | BREAK SEMICOLON
   10          | expression SEMICOLON
   11          | RETURN expression SEMICOLON
   12          | SEMICOLON
   13          | function_declaration
   14          | variable_declaration
   15          | enum_declaration

   16 block_statement: LCURLY statement_list RCURLY
   17                | LCURLY RCURLY

   18 statement_list: statement
   19               | statement_list statement

   20 variable_declaration: data_type variable_list SEMICOLON
   21                     | CONST data_type variable_list SEMICOLON

   22 variable_list: variable
   23              | variable_list COMMA variable

   24 variable: IDENTIFIER
   25         | IDENTIFIER ASSIGNOP assign_expression

   26 data_type: INT
   27          | FLOAT
   28          | CHAR
   29          | BOOL
   30          | STRING
   31          | VOID

   32 enum_declaration: ENUM IDENTIFIER LCURLY enum_values RCURLY SEMICOLON

   33 enum_values: IDENTIFIER
   34            | IDENTIFIER ASSIGNOP literal
   35            | enum_values COMMA IDENTIFIER
   36            | enum_values COMMA IDENTIFIER ASSIGNOP literal

   37 function_declaration: function_siganture block_statement

   38 function_siganture: data_type IDENTIFIER LPAREN parameter_list RPAREN

   39 parameter_list: ε
   40               | parameter_declaration
   41               | parameter_declaration COMMA parameter_list

   42 parameter_declaration: data_type IDENTIFIER
   43                      | CONST data_type IDENTIFIER

   44 variable_declaration_list: variable_declaration
   45                          | variable_declaration_list variable_declaration

   46 if_statement: matched_if_statement
   47             | unmatched_if_statement

   48 matched_if_statement: IF LPAREN expression RPAREN matched_if_statement ELSE matched_if_statement
   49                     | block_statement

   50 unmatched_if_statement: IF LPAREN expression RPAREN block_statement
   51                       | IF LPAREN expression RPAREN matched_if_statement ELSE unmatched_if_statement

   52 switch_statement: SWITCH LPAREN expression RPAREN LCURLY case_list RCURLY

   53 case_statement: CASE expression COLON statement_list

   54 default_statement: DEFAULT COLON statement_list

   55 case_list: case_list case_statement
   56          | case_list default_statement
   57          | case_statement
   58          | default_statement

   59 iteration_statement: WHILE LPAREN expression RPAREN block_statement
   60                    | FOR LPAREN variable_declaration_list expression SEMICOLON expression RPAREN block_statement
   61                    | DO block_statement WHILE LPAREN expression RPAREN SEMICOLON

   62 function_call_statement: IDENTIFIER LPAREN function_call_expression RPAREN SEMICOLON

   63 function_call_expression: ε
   64                         | expression

   65 expression: expression COMMA assign_expression
   66           | assign_expression

   67 assign_expression: IDENTIFIER ASSIGNOP assign_expression
   68                  | logical_or_expression

   69 logical_or_expression: logical_or_expression OR logical_and_expression
   70                      | logical_and_expression

   71 logical_and_expression: logical_and_expression AND equality_expression
   72                       | equality_expression

   73 equality_expression: equality_expression EQ relational_expression
   74                    | equality_expression NE relational_expression
   75                    | relational_expression

   76 relational_expression: relational_expression LT additive_expression
   77                      | relational_expression GT additive_expression
   78                      | relational_expression LE additive_expression
   79                      | relational_expression GE additive_expression
   80                      | additive_expression

   81 additive_expression: additive_expression PLUS multiplicative_expression
   82                    | additive_expression SUBTRACT multiplicative_expression
   83                    | multiplicative_expression

   84 multiplicative_expression: multiplicative_expression MULTIPLY prefix_expression
   85                          | multiplicative_expression DIVIDE prefix_expression
   86                          | prefix_expression

   87 prefix_expression: UNARYADD prefix_expression
   88                  | UNARYSUB prefix_expression
   89                  | postfix_expression

   90 postfix_expression: postfix_expression UNARYADD
   91                   | postfix_expression UNARYSUB
   92                   | primary_expression

   93 primary_expression: IDENTIFIER
   94                   | literal

   95 literal: FALSE
   96        | TRUE
   97        | INT_LITERAL
   98        | FLOAT_LITERAL
   99        | CHARACTER_LITERAL


Terminals, with rules where they appear

    $end (0) 0
    error (256) 3
    PRINTF (258)
    SCANF (259)
    INT (260) 26
    FLOAT (261) 27
    CHAR (262) 28
    BOOL (263) 29
    STRING (264) 30
    VOID (265) 31
    CONST (266) 21 43
    FOR (267) 60
    IF (268) 48 50 51
    ELSE (269) 48 51
    SWITCH (270) 52
    WHILE (271) 59 61
    DO (272) 61
    CASE (273) 53
    CONTINUE (274) 8
    BREAK (275) 9
    DEFAULT (276) 54
    REPEAT (277)
    UNTIL (278)
    PLUS (279) 81
    MULTIPLY (280) 84
    DIVIDE (281) 85
    SUBTRACT (282) 82
    UNARYADD (283) 87 90
    UNARYSUB (284) 88 91
    NOT (285)
    LE (286) 78
    GE (287) 79
    EQ (288) 73
    NE (289) 74
    GT (290) 77
    LT (291) 76
    AND (292) 71
    OR (293) 69
    ASSIGNOP (294) 25 34 36 67
    SEMICOLON (295) 3 8 9 10 11 12 20 21 32 60 61 62
    COLON (296) 53 54
    COMMA (297) 23 35 36 41 65
    LCURLY (298) 16 17 32 52
    RCURLY (299) 16 17 32 52
    LPAREN (300) 38 48 50 51 52 59 60 61 62
    RPAREN (301) 38 48 50 51 52 59 60 61 62
    ENUM (302) 32
    IDENTIFIER (303) 24 25 32 33 34 35 36 38 42 43 62 67 93
    RETURN (304) 11
    INCLUDE (305)
    END (306)
    FALSE <boolValue> (307) 95
    TRUE <boolValue> (308) 96
    INT_LITERAL <intValue> (309) 97
    FLOAT_LITERAL <floatValue> (310) 98
    CHARACTER_LITERAL <charValue> (311) 99


Nonterminals, with rules where they appear

    $accept (57)
        on left: 0
    program (58)
        on left: 1 2 3
        on right: 0 2
    statement (59)
        on left: 4 5 6 7 8 9 10 11 12 13 14 15
        on right: 1 2 18 19
    block_statement (60)
        on left: 16 17
        on right: 37 49 50 59 60 61
    statement_list (61)
        on left: 18 19
        on right: 16 19 53 54
    variable_declaration (62)
        on left: 20 21
        on right: 14 44 45
    variable_list (63)
        on left: 22 23
        on right: 20 21 23
    variable (64)
        on left: 24 25
        on right: 22 23
    data_type (65)
        on left: 26 27 28 29 30 31
        on right: 20 21 38 42 43
    enum_declaration (66)
        on left: 32
        on right: 15
    enum_values (67)
        on left: 33 34 35 36
        on right: 32 35 36
    function_declaration (68)
        on left: 37
        on right: 13
    function_siganture (69)
        on left: 38
        on right: 37
    parameter_list (70)
        on left: 39 40 41
        on right: 38 41
    parameter_declaration (71)
        on left: 42 43
        on right: 40 41
    variable_declaration_list (72)
        on left: 44 45
        on right: 45 60
    if_statement (73)
        on left: 46 47
        on right: 4
    matched_if_statement (74)
        on left: 48 49
        on right: 46 48 51
    unmatched_if_statement (75)
        on left: 50 51
        on right: 47 51
    switch_statement (76)
        on left: 52
        on right: 5
    case_statement (77)
        on left: 53
        on right: 55 57
    default_statement (78)
        on left: 54
        on right: 56 58
    case_list (79)
        on left: 55 56 57 58
        on right: 52 55 56
    iteration_statement (80)
        on left: 59 60 61
        on right: 6
    function_call_statement (81)
        on left: 62
        on right: 7
    function_call_expression (82)
        on left: 63 64
        on right: 62
    expression (83)
        on left: 65 66
        on right: 10 11 48 50 51 52 53 59 60 61 64 65
    assign_expression (84)
        on left: 67 68
        on right: 25 65 66 67
    logical_or_expression (85)
        on left: 69 70
        on right: 68 69
    logical_and_expression (86)
        on left: 71 72
        on right: 69 70 71
    equality_expression (87)
        on left: 73 74 75
        on right: 71 72 73 74
    relational_expression (88)
        on left: 76 77 78 79 80
        on right: 73 74 75 76 77 78 79
    additive_expression (89)
        on left: 81 82 83
        on right: 76 77 78 79 80 81 82
    multiplicative_expression (90)
        on left: 84 85 86
        on right: 81 82 83 84 85
    prefix_expression (91)
        on left: 87 88 89
        on right: 84 85 86 87 88
    postfix_expression (92)
        on left: 90 91 92
        on right: 89 90 91
    primary_expression (93)
        on left: 93 94
        on right: 92
    literal (94)
        on left: 95 96 97 98 99
        on right: 34 36 94


State 0

    0 $accept: • program $end

    error              shift, and go to state 1
    INT                shift, and go to state 2
    FLOAT              shift, and go to state 3
    CHAR               shift, and go to state 4
    BOOL               shift, and go to state 5
    STRING             shift, and go to state 6
    VOID               shift, and go to state 7
    CONST              shift, and go to state 8
    FOR                shift, and go to state 9
    IF                 shift, and go to state 10
    SWITCH             shift, and go to state 11
    WHILE              shift, and go to state 12
    DO                 shift, and go to state 13
    CONTINUE           shift, and go to state 14
    BREAK              shift, and go to state 15
    UNARYADD           shift, and go to state 16
    UNARYSUB           shift, and go to state 17
    SEMICOLON          shift, and go to state 18
    LCURLY             shift, and go to state 19
    ENUM               shift, and go to state 20
    IDENTIFIER         shift, and go to state 21
    RETURN             shift, and go to state 22
    FALSE              shift, and go to state 23
    TRUE               shift, and go to state 24
    INT_LITERAL        shift, and go to state 25
    FLOAT_LITERAL      shift, and go to state 26
    CHARACTER_LITERAL  shift, and go to state 27

    program                    go to state 28
    statement                  go to state 29
    block_statement            go to state 30
    variable_declaration       go to state 31
    data_type                  go to state 32
    enum_declaration           go to state 33
    function_declaration       go to state 34
    function_siganture         go to state 35
    if_statement               go to state 36
    matched_if_statement       go to state 37
    unmatched_if_statement     go to state 38
    switch_statement           go to state 39
    iteration_statement        go to state 40
    function_call_statement    go to state 41
    expression                 go to state 42
    assign_expression          go to state 43
    logical_or_expression      go to state 44
    logical_and_expression     go to state 45
    equality_expression        go to state 46
    relational_expression      go to state 47
    additive_expression        go to state 48
    multiplicative_expression  go to state 49
    prefix_expression          go to state 50
    postfix_expression         go to state 51
    primary_expression         go to state 52
    literal                    go to state 53


State 1

    3 program: error • SEMICOLON

    SEMICOLON  shift, and go to state 54


State 2

   26 data_type: INT •

    $default  reduce using rule 26 (data_type)


State 3

   27 data_type: FLOAT •

    $default  reduce using rule 27 (data_type)


State 4

   28 data_type: CHAR •

    $default  reduce using rule 28 (data_type)


State 5

   29 data_type: BOOL •

    $default  reduce using rule 29 (data_type)


State 6

   30 data_type: STRING •

    $default  reduce using rule 30 (data_type)


State 7

   31 data_type: VOID •

    $default  reduce using rule 31 (data_type)


State 8

   21 variable_declaration: CONST • data_type variable_list SEMICOLON

    INT     shift, and go to state 2
    FLOAT   shift, and go to state 3
    CHAR    shift, and go to state 4
    BOOL    shift, and go to state 5
    STRING  shift, and go to state 6
    VOID    shift, and go to state 7

    data_type  go to state 55


State 9

   60 iteration_statement: FOR • LPAREN variable_declaration_list expression SEMICOLON expression RPAREN block_statement

    LPAREN  shift, and go to state 56


State 10

   48 matched_if_statement: IF • LPAREN expression RPAREN matched_if_statement ELSE matched_if_statement
   50 unmatched_if_statement: IF • LPAREN expression RPAREN block_statement
   51                       | IF • LPAREN expression RPAREN matched_if_statement ELSE unmatched_if_statement

    LPAREN  shift, and go to state 57


State 11

   52 switch_statement: SWITCH • LPAREN expression RPAREN LCURLY case_list RCURLY

    LPAREN  shift, and go to state 58


State 12

   59 iteration_statement: WHILE • LPAREN expression RPAREN block_statement

    LPAREN  shift, and go to state 59


State 13

   61 iteration_statement: DO • block_statement WHILE LPAREN expression RPAREN SEMICOLON

    LCURLY  shift, and go to state 19

    block_statement  go to state 60


State 14

    8 statement: CONTINUE • SEMICOLON

    SEMICOLON  shift, and go to state 61


State 15

    9 statement: BREAK • SEMICOLON

    SEMICOLON  shift, and go to state 62


State 16

   87 prefix_expression: UNARYADD • prefix_expression

    UNARYADD           shift, and go to state 16
    UNARYSUB           shift, and go to state 17
    IDENTIFIER         shift, and go to state 63
    FALSE              shift, and go to state 23
    TRUE               shift, and go to state 24
    INT_LITERAL        shift, and go to state 25
    FLOAT_LITERAL      shift, and go to state 26
    CHARACTER_LITERAL  shift, and go to state 27

    prefix_expression   go to state 64
    postfix_expression  go to state 51
    primary_expression  go to state 52
    literal             go to state 53


State 17

   88 prefix_expression: UNARYSUB • prefix_expression

    UNARYADD           shift, and go to state 16
    UNARYSUB           shift, and go to state 17
    IDENTIFIER         shift, and go to state 63
    FALSE              shift, and go to state 23
    TRUE               shift, and go to state 24
    INT_LITERAL        shift, and go to state 25
    FLOAT_LITERAL      shift, and go to state 26
    CHARACTER_LITERAL  shift, and go to state 27

    prefix_expression   go to state 65
    postfix_expression  go to state 51
    primary_expression  go to state 52
    literal             go to state 53


State 18

   12 statement: SEMICOLON •

    $default  reduce using rule 12 (statement)


State 19

   16 block_statement: LCURLY • statement_list RCURLY
   17                | LCURLY • RCURLY

    INT                shift, and go to state 2
    FLOAT              shift, and go to state 3
    CHAR               shift, and go to state 4
    BOOL               shift, and go to state 5
    STRING             shift, and go to state 6
    VOID               shift, and go to state 7
    CONST              shift, and go to state 8
    FOR                shift, and go to state 9
    IF                 shift, and go to state 10
    SWITCH             shift, and go to state 11
    WHILE              shift, and go to state 12
    DO                 shift, and go to state 13
    CONTINUE           shift, and go to state 14
    BREAK              shift, and go to state 15
    UNARYADD           shift, and go to state 16
    UNARYSUB           shift, and go to state 17
    SEMICOLON          shift, and go to state 18
    LCURLY             shift, and go to state 19
    RCURLY             shift, and go to state 66
    ENUM               shift, and go to state 20
    IDENTIFIER         shift, and go to state 21
    RETURN             shift, and go to state 22
    FALSE              shift, and go to state 23
    TRUE               shift, and go to state 24
    INT_LITERAL        shift, and go to state 25
    FLOAT_LITERAL      shift, and go to state 26
    CHARACTER_LITERAL  shift, and go to state 27

    statement                  go to state 67
    block_statement            go to state 30
    statement_list             go to state 68
    variable_declaration       go to state 31
    data_type                  go to state 32
    enum_declaration           go to state 33
    function_declaration       go to state 34
    function_siganture         go to state 35
    if_statement               go to state 36
    matched_if_statement       go to state 37
    unmatched_if_statement     go to state 38
    switch_statement           go to state 39
    iteration_statement        go to state 40
    function_call_statement    go to state 41
    expression                 go to state 42
    assign_expression          go to state 43
    logical_or_expression      go to state 44
    logical_and_expression     go to state 45
    equality_expression        go to state 46
    relational_expression      go to state 47
    additive_expression        go to state 48
    multiplicative_expression  go to state 49
    prefix_expression          go to state 50
    postfix_expression         go to state 51
    primary_expression         go to state 52
    literal                    go to state 53


State 20

   32 enum_declaration: ENUM • IDENTIFIER LCURLY enum_values RCURLY SEMICOLON

    IDENTIFIER  shift, and go to state 69


State 21

   62 function_call_statement: IDENTIFIER • LPAREN function_call_expression RPAREN SEMICOLON
   67 assign_expression: IDENTIFIER • ASSIGNOP assign_expression
   93 primary_expression: IDENTIFIER •

    ASSIGNOP  shift, and go to state 70
    LPAREN    shift, and go to state 71

    $default  reduce using rule 93 (primary_expression)


State 22

   11 statement: RETURN • expression SEMICOLON

    UNARYADD           shift, and go to state 16
    UNARYSUB           shift, and go to state 17
    IDENTIFIER         shift, and go to state 72
    FALSE              shift, and go to state 23
    TRUE               shift, and go to state 24
    INT_LITERAL        shift, and go to state 25
    FLOAT_LITERAL      shift, and go to state 26
    CHARACTER_LITERAL  shift, and go to state 27

    expression                 go to state 73
    assign_expression          go to state 43
    logical_or_expression      go to state 44
    logical_and_expression     go to state 45
    equality_expression        go to state 46
    relational_expression      go to state 47
    additive_expression        go to state 48
    multiplicative_expression  go to state 49
    prefix_expression          go to state 50
    postfix_expression         go to state 51
    primary_expression         go to state 52
    literal                    go to state 53


State 23

   95 literal: FALSE •

    $default  reduce using rule 95 (literal)


State 24

   96 literal: TRUE •

    $default  reduce using rule 96 (literal)


State 25

   97 literal: INT_LITERAL •

    $default  reduce using rule 97 (literal)


State 26

   98 literal: FLOAT_LITERAL •

    $default  reduce using rule 98 (literal)


State 27

   99 literal: CHARACTER_LITERAL •

    $default  reduce using rule 99 (literal)


State 28

    0 $accept: program • $end
    2 program: program • statement

    $end               shift, and go to state 74
    INT                shift, and go to state 2
    FLOAT              shift, and go to state 3
    CHAR               shift, and go to state 4
    BOOL               shift, and go to state 5
    STRING             shift, and go to state 6
    VOID               shift, and go to state 7
    CONST              shift, and go to state 8
    FOR                shift, and go to state 9
    IF                 shift, and go to state 10
    SWITCH             shift, and go to state 11
    WHILE              shift, and go to state 12
    DO                 shift, and go to state 13
    CONTINUE           shift, and go to state 14
    BREAK              shift, and go to state 15
    UNARYADD           shift, and go to state 16
    UNARYSUB           shift, and go to state 17
    SEMICOLON          shift, and go to state 18
    LCURLY             shift, and go to state 19
    ENUM               shift, and go to state 20
    IDENTIFIER         shift, and go to state 21
    RETURN             shift, and go to state 22
    FALSE              shift, and go to state 23
    TRUE               shift, and go to state 24
    INT_LITERAL        shift, and go to state 25
    FLOAT_LITERAL      shift, and go to state 26
    CHARACTER_LITERAL  shift, and go to state 27

    statement                  go to state 75
    block_statement            go to state 30
    variable_declaration       go to state 31
    data_type                  go to state 32
    enum_declaration           go to state 33
    function_declaration       go to state 34
    function_siganture         go to state 35
    if_statement               go to state 36
    matched_if_statement       go to state 37
    unmatched_if_statement     go to state 38
    switch_statement           go to state 39
    iteration_statement        go to state 40
    function_call_statement    go to state 41
    expression                 go to state 42
    assign_expression          go to state 43
    logical_or_expression      go to state 44
    logical_and_expression     go to state 45
    equality_expression        go to state 46
    relational_expression      go to state 47
    additive_expression        go to state 48
    multiplicative_expression  go to state 49
    prefix_expression          go to state 50
    postfix_expression         go to state 51
    primary_expression         go to state 52
    literal                    go to state 53


State 29

    1 program: statement •

    $default  reduce using rule 1 (program)


State 30

   49 matched_if_statement: block_statement •

    $default  reduce using rule 49 (matched_if_statement)


State 31

   14 statement: variable_declaration •

    $default  reduce using rule 14 (statement)


State 32

   20 variable_declaration: data_type • variable_list SEMICOLON
   38 function_siganture: data_type • IDENTIFIER LPAREN parameter_list RPAREN

    IDENTIFIER  shift, and go to state 76

    variable_list  go to state 77
    variable       go to state 78


State 33

   15 statement: enum_declaration •

    $default  reduce using rule 15 (statement)


State 34

   13 statement: function_declaration •

    $default  reduce using rule 13 (statement)


State 35

   37 function_declaration: function_siganture • block_statement

    LCURLY  shift, and go to state 19

    block_statement  go to state 79


State 36

    4 statement: if_statement •

    $default  reduce using rule 4 (statement)


State 37

   46 if_statement: matched_if_statement •

    $default  reduce using rule 46 (if_statement)


State 38

   47 if_statement: unmatched_if_statement •

    $default  reduce using rule 47 (if_statement)


State 39

    5 statement: switch_statement •

    $default  reduce using rule 5 (statement)


State 40

    6 statement: iteration_statement •

    $default  reduce using rule 6 (statement)


State 41

    7 statement: function_call_statement •

    $default  reduce using rule 7 (statement)


State 42

   10 statement: expression • SEMICOLON
   65 expression: expression • COMMA assign_expression

    SEMICOLON  shift, and go to state 80
    COMMA      shift, and go to state 81


State 43

   66 expression: assign_expression •

    $default  reduce using rule 66 (expression)


State 44

   68 assign_expression: logical_or_expression •
   69 logical_or_expression: logical_or_expression • OR logical_and_expression

    OR  shift, and go to state 82

    $default  reduce using rule 68 (assign_expression)


State 45

   70 logical_or_expression: logical_and_expression •
   71 logical_and_expression: logical_and_expression • AND equality_expression

    AND  shift, and go to state 83

    $default  reduce using rule 70 (logical_or_expression)


State 46

   72 logical_and_expression: equality_expression •
   73 equality_expression: equality_expression • EQ relational_expression
   74                    | equality_expression • NE relational_expression

    EQ  shift, and go to state 84
    NE  shift, and go to state 85

    $default  reduce using rule 72 (logical_and_expression)


State 47

   75 equality_expression: relational_expression •
   76 relational_expression: relational_expression • LT additive_expression
   77                      | relational_expression • GT additive_expression
   78                      | relational_expression • LE additive_expression
   79                      | relational_expression • GE additive_expression

    LE  shift, and go to state 86
    GE  shift, and go to state 87
    GT  shift, and go to state 88
    LT  shift, and go to state 89

    $default  reduce using rule 75 (equality_expression)


State 48

   80 relational_expression: additive_expression •
   81 additive_expression: additive_expression • PLUS multiplicative_expression
   82                    | additive_expression • SUBTRACT multiplicative_expression

    PLUS      shift, and go to state 90
    SUBTRACT  shift, and go to state 91

    $default  reduce using rule 80 (relational_expression)


State 49

   83 additive_expression: multiplicative_expression •
   84 multiplicative_expression: multiplicative_expression • MULTIPLY prefix_expression
   85                          | multiplicative_expression • DIVIDE prefix_expression

    MULTIPLY  shift, and go to state 92
    DIVIDE    shift, and go to state 93

    $default  reduce using rule 83 (additive_expression)


State 50

   86 multiplicative_expression: prefix_expression •

    $default  reduce using rule 86 (multiplicative_expression)


State 51

   89 prefix_expression: postfix_expression •
   90 postfix_expression: postfix_expression • UNARYADD
   91                   | postfix_expression • UNARYSUB

    UNARYADD  shift, and go to state 94
    UNARYSUB  shift, and go to state 95

    $default  reduce using rule 89 (prefix_expression)


State 52

   92 postfix_expression: primary_expression •

    $default  reduce using rule 92 (postfix_expression)


State 53

   94 primary_expression: literal •

    $default  reduce using rule 94 (primary_expression)


State 54

    3 program: error SEMICOLON •

    $default  reduce using rule 3 (program)


State 55

   21 variable_declaration: CONST data_type • variable_list SEMICOLON

    IDENTIFIER  shift, and go to state 96

    variable_list  go to state 97
    variable       go to state 78


State 56

   60 iteration_statement: FOR LPAREN • variable_declaration_list expression SEMICOLON expression RPAREN block_statement

    INT     shift, and go to state 2
    FLOAT   shift, and go to state 3
    CHAR    shift, and go to state 4
    BOOL    shift, and go to state 5
    STRING  shift, and go to state 6
    VOID    shift, and go to state 7
    CONST   shift, and go to state 8

    variable_declaration       go to state 98
    data_type                  go to state 99
    variable_declaration_list  go to state 100


State 57

   48 matched_if_statement: IF LPAREN • expression RPAREN matched_if_statement ELSE matched_if_statement
   50 unmatched_if_statement: IF LPAREN • expression RPAREN block_statement
   51                       | IF LPAREN • expression RPAREN matched_if_statement ELSE unmatched_if_statement

    UNARYADD           shift, and go to state 16
    UNARYSUB           shift, and go to state 17
    IDENTIFIER         shift, and go to state 72
    FALSE              shift, and go to state 23
    TRUE               shift, and go to state 24
    INT_LITERAL        shift, and go to state 25
    FLOAT_LITERAL      shift, and go to state 26
    CHARACTER_LITERAL  shift, and go to state 27

    expression                 go to state 101
    assign_expression          go to state 43
    logical_or_expression      go to state 44
    logical_and_expression     go to state 45
    equality_expression        go to state 46
    relational_expression      go to state 47
    additive_expression        go to state 48
    multiplicative_expression  go to state 49
    prefix_expression          go to state 50
    postfix_expression         go to state 51
    primary_expression         go to state 52
    literal                    go to state 53


State 58

   52 switch_statement: SWITCH LPAREN • expression RPAREN LCURLY case_list RCURLY

    UNARYADD           shift, and go to state 16
    UNARYSUB           shift, and go to state 17
    IDENTIFIER         shift, and go to state 72
    FALSE              shift, and go to state 23
    TRUE               shift, and go to state 24
    INT_LITERAL        shift, and go to state 25
    FLOAT_LITERAL      shift, and go to state 26
    CHARACTER_LITERAL  shift, and go to state 27

    expression                 go to state 102
    assign_expression          go to state 43
    logical_or_expression      go to state 44
    logical_and_expression     go to state 45
    equality_expression        go to state 46
    relational_expression      go to state 47
    additive_expression        go to state 48
    multiplicative_expression  go to state 49
    prefix_expression          go to state 50
    postfix_expression         go to state 51
    primary_expression         go to state 52
    literal                    go to state 53


State 59

   59 iteration_statement: WHILE LPAREN • expression RPAREN block_statement

    UNARYADD           shift, and go to state 16
    UNARYSUB           shift, and go to state 17
    IDENTIFIER         shift, and go to state 72
    FALSE              shift, and go to state 23
    TRUE               shift, and go to state 24
    INT_LITERAL        shift, and go to state 25
    FLOAT_LITERAL      shift, and go to state 26
    CHARACTER_LITERAL  shift, and go to state 27

    expression                 go to state 103
    assign_expression          go to state 43
    logical_or_expression      go to state 44
    logical_and_expression     go to state 45
    equality_expression        go to state 46
    relational_expression      go to state 47
    additive_expression        go to state 48
    multiplicative_expression  go to state 49
    prefix_expression          go to state 50
    postfix_expression         go to state 51
    primary_expression         go to state 52
    literal                    go to state 53


State 60

   61 iteration_statement: DO block_statement • WHILE LPAREN expression RPAREN SEMICOLON

    WHILE  shift, and go to state 104


State 61

    8 statement: CONTINUE SEMICOLON •

    $default  reduce using rule 8 (statement)


State 62

    9 statement: BREAK SEMICOLON •

    $default  reduce using rule 9 (statement)


State 63

   93 primary_expression: IDENTIFIER •

    $default  reduce using rule 93 (primary_expression)


State 64

   87 prefix_expression: UNARYADD prefix_expression •

    $default  reduce using rule 87 (prefix_expression)


State 65

   88 prefix_expression: UNARYSUB prefix_expression •

    $default  reduce using rule 88 (prefix_expression)


State 66

   17 block_statement: LCURLY RCURLY •

    $default  reduce using rule 17 (block_statement)


State 67

   18 statement_list: statement •

    $default  reduce using rule 18 (statement_list)


State 68

   16 block_statement: LCURLY statement_list • RCURLY
   19 statement_list: statement_list • statement

    INT                shift, and go to state 2
    FLOAT              shift, and go to state 3
    CHAR               shift, and go to state 4
    BOOL               shift, and go to state 5
    STRING             shift, and go to state 6
    VOID               shift, and go to state 7
    CONST              shift, and go to state 8
    FOR                shift, and go to state 9
    IF                 shift, and go to state 10
    SWITCH             shift, and go to state 11
    WHILE              shift, and go to state 12
    DO                 shift, and go to state 13
    CONTINUE           shift, and go to state 14
    BREAK              shift, and go to state 15
    UNARYADD           shift, and go to state 16
    UNARYSUB           shift, and go to state 17
    SEMICOLON          shift, and go to state 18
    LCURLY             shift, and go to state 19
    RCURLY             shift, and go to state 105
    ENUM               shift, and go to state 20
    IDENTIFIER         shift, and go to state 21
    RETURN             shift, and go to state 22
    FALSE              shift, and go to state 23
    TRUE               shift, and go to state 24
    INT_LITERAL        shift, and go to state 25
    FLOAT_LITERAL      shift, and go to state 26
    CHARACTER_LITERAL  shift, and go to state 27

    statement                  go to state 106
    block_statement            go to state 30
    variable_declaration       go to state 31
    data_type                  go to state 32
    enum_declaration           go to state 33
    function_declaration       go to state 34
    function_siganture         go to state 35
    if_statement               go to state 36
    matched_if_statement       go to state 37
    unmatched_if_statement     go to state 38
    switch_statement           go to state 39
    iteration_statement        go to state 40
    function_call_statement    go to state 41
    expression                 go to state 42
    assign_expression          go to state 43
    logical_or_expression      go to state 44
    logical_and_expression     go to state 45
    equality_expression        go to state 46
    relational_expression      go to state 47
    additive_expression        go to state 48
    multiplicative_expression  go to state 49
    prefix_expression          go to state 50
    postfix_expression         go to state 51
    primary_expression         go to state 52
    literal                    go to state 53


State 69

   32 enum_declaration: ENUM IDENTIFIER • LCURLY enum_values RCURLY SEMICOLON

    LCURLY  shift, and go to state 107


State 70

   67 assign_expression: IDENTIFIER ASSIGNOP • assign_expression

    UNARYADD           shift, and go to state 16
    UNARYSUB           shift, and go to state 17
    IDENTIFIER         shift, and go to state 72
    FALSE              shift, and go to state 23
    TRUE               shift, and go to state 24
    INT_LITERAL        shift, and go to state 25
    FLOAT_LITERAL      shift, and go to state 26
    CHARACTER_LITERAL  shift, and go to state 27

    assign_expression          go to state 108
    logical_or_expression      go to state 44
    logical_and_expression     go to state 45
    equality_expression        go to state 46
    relational_expression      go to state 47
    additive_expression        go to state 48
    multiplicative_expression  go to state 49
    prefix_expression          go to state 50
    postfix_expression         go to state 51
    primary_expression         go to state 52
    literal                    go to state 53


State 71

   62 function_call_statement: IDENTIFIER LPAREN • function_call_expression RPAREN SEMICOLON

    UNARYADD           shift, and go to state 16
    UNARYSUB           shift, and go to state 17
    IDENTIFIER         shift, and go to state 72
    FALSE              shift, and go to state 23
    TRUE               shift, and go to state 24
    INT_LITERAL        shift, and go to state 25
    FLOAT_LITERAL      shift, and go to state 26
    CHARACTER_LITERAL  shift, and go to state 27

    $default  reduce using rule 63 (function_call_expression)

    function_call_expression   go to state 109
    expression                 go to state 110
    assign_expression          go to state 43
    logical_or_expression      go to state 44
    logical_and_expression     go to state 45
    equality_expression        go to state 46
    relational_expression      go to state 47
    additive_expression        go to state 48
    multiplicative_expression  go to state 49
    prefix_expression          go to state 50
    postfix_expression         go to state 51
    primary_expression         go to state 52
    literal                    go to state 53


State 72

   67 assign_expression: IDENTIFIER • ASSIGNOP assign_expression
   93 primary_expression: IDENTIFIER •

    ASSIGNOP  shift, and go to state 70

    $default  reduce using rule 93 (primary_expression)


State 73

   11 statement: RETURN expression • SEMICOLON
   65 expression: expression • COMMA assign_expression

    SEMICOLON  shift, and go to state 111
    COMMA      shift, and go to state 81


State 74

    0 $accept: program $end •

    $default  accept


State 75

    2 program: program statement •

    $default  reduce using rule 2 (program)


State 76

   24 variable: IDENTIFIER •
   25         | IDENTIFIER • ASSIGNOP assign_expression
   38 function_siganture: data_type IDENTIFIER • LPAREN parameter_list RPAREN

    ASSIGNOP  shift, and go to state 112
    LPAREN    shift, and go to state 113

    $default  reduce using rule 24 (variable)


State 77

   20 variable_declaration: data_type variable_list • SEMICOLON
   23 variable_list: variable_list • COMMA variable

    SEMICOLON  shift, and go to state 114
    COMMA      shift, and go to state 115


State 78

   22 variable_list: variable •

    $default  reduce using rule 22 (variable_list)


State 79

   37 function_declaration: function_siganture block_statement •

    $default  reduce using rule 37 (function_declaration)


State 80

   10 statement: expression SEMICOLON •

    $default  reduce using rule 10 (statement)


State 81

   65 expression: expression COMMA • assign_expression

    UNARYADD           shift, and go to state 16
    UNARYSUB           shift, and go to state 17
    IDENTIFIER         shift, and go to state 72
    FALSE              shift, and go to state 23
    TRUE               shift, and go to state 24
    INT_LITERAL        shift, and go to state 25
    FLOAT_LITERAL      shift, and go to state 26
    CHARACTER_LITERAL  shift, and go to state 27

    assign_expression          go to state 116
    logical_or_expression      go to state 44
    logical_and_expression     go to state 45
    equality_expression        go to state 46
    relational_expression      go to state 47
    additive_expression        go to state 48
    multiplicative_expression  go to state 49
    prefix_expression          go to state 50
    postfix_expression         go to state 51
    primary_expression         go to state 52
    literal                    go to state 53


State 82

   69 logical_or_expression: logical_or_expression OR • logical_and_expression

    UNARYADD           shift, and go to state 16
    UNARYSUB           shift, and go to state 17
    IDENTIFIER         shift, and go to state 63
    FALSE              shift, and go to state 23
    TRUE               shift, and go to state 24
    INT_LITERAL        shift, and go to state 25
    FLOAT_LITERAL      shift, and go to state 26
    CHARACTER_LITERAL  shift, and go to state 27

    logical_and_expression     go to state 117
    equality_expression        go to state 46
    relational_expression      go to state 47
    additive_expression        go to state 48
    multiplicative_expression  go to state 49
    prefix_expression          go to state 50
    postfix_expression         go to state 51
    primary_expression         go to state 52
    literal                    go to state 53


State 83

   71 logical_and_expression: logical_and_expression AND • equality_expression

    UNARYADD           shift, and go to state 16
    UNARYSUB           shift, and go to state 17
    IDENTIFIER         shift, and go to state 63
    FALSE              shift, and go to state 23
    TRUE               shift, and go to state 24
    INT_LITERAL        shift, and go to state 25
    FLOAT_LITERAL      shift, and go to state 26
    CHARACTER_LITERAL  shift, and go to state 27

    equality_expression        go to state 118
    relational_expression      go to state 47
    additive_expression        go to state 48
    multiplicative_expression  go to state 49
    prefix_expression          go to state 50
    postfix_expression         go to state 51
    primary_expression         go to state 52
    literal                    go to state 53


State 84

   73 equality_expression: equality_expression EQ • relational_expression

    UNARYADD           shift, and go to state 16
    UNARYSUB           shift, and go to state 17
    IDENTIFIER         shift, and go to state 63
    FALSE              shift, and go to state 23
    TRUE               shift, and go to state 24
    INT_LITERAL        shift, and go to state 25
    FLOAT_LITERAL      shift, and go to state 26
    CHARACTER_LITERAL  shift, and go to state 27

    relational_expression      go to state 119
    additive_expression        go to state 48
    multiplicative_expression  go to state 49
    prefix_expression          go to state 50
    postfix_expression         go to state 51
    primary_expression         go to state 52
    literal                    go to state 53


State 85

   74 equality_expression: equality_expression NE • relational_expression

    UNARYADD           shift, and go to state 16
    UNARYSUB           shift, and go to state 17
    IDENTIFIER         shift, and go to state 63
    FALSE              shift, and go to state 23
    TRUE               shift, and go to state 24
    INT_LITERAL        shift, and go to state 25
    FLOAT_LITERAL      shift, and go to state 26
    CHARACTER_LITERAL  shift, and go to state 27

    relational_expression      go to state 120
    additive_expression        go to state 48
    multiplicative_expression  go to state 49
    prefix_expression          go to state 50
    postfix_expression         go to state 51
    primary_expression         go to state 52
    literal                    go to state 53


State 86

   78 relational_expression: relational_expression LE • additive_expression

    UNARYADD           shift, and go to state 16
    UNARYSUB           shift, and go to state 17
    IDENTIFIER         shift, and go to state 63
    FALSE              shift, and go to state 23
    TRUE               shift, and go to state 24
    INT_LITERAL        shift, and go to state 25
    FLOAT_LITERAL      shift, and go to state 26
    CHARACTER_LITERAL  shift, and go to state 27

    additive_expression        go to state 121
    multiplicative_expression  go to state 49
    prefix_expression          go to state 50
    postfix_expression         go to state 51
    primary_expression         go to state 52
    literal                    go to state 53


State 87

   79 relational_expression: relational_expression GE • additive_expression

    UNARYADD           shift, and go to state 16
    UNARYSUB           shift, and go to state 17
    IDENTIFIER         shift, and go to state 63
    FALSE              shift, and go to state 23
    TRUE               shift, and go to state 24
    INT_LITERAL        shift, and go to state 25
    FLOAT_LITERAL      shift, and go to state 26
    CHARACTER_LITERAL  shift, and go to state 27

    additive_expression        go to state 122
    multiplicative_expression  go to state 49
    prefix_expression          go to state 50
    postfix_expression         go to state 51
    primary_expression         go to state 52
    literal                    go to state 53


State 88

   77 relational_expression: relational_expression GT • additive_expression

    UNARYADD           shift, and go to state 16
    UNARYSUB           shift, and go to state 17
    IDENTIFIER         shift, and go to state 63
    FALSE              shift, and go to state 23
    TRUE               shift, and go to state 24
    INT_LITERAL        shift, and go to state 25
    FLOAT_LITERAL      shift, and go to state 26
    CHARACTER_LITERAL  shift, and go to state 27

    additive_expression        go to state 123
    multiplicative_expression  go to state 49
    prefix_expression          go to state 50
    postfix_expression         go to state 51
    primary_expression         go to state 52
    literal                    go to state 53


State 89

   76 relational_expression: relational_expression LT • additive_expression

    UNARYADD           shift, and go to state 16
    UNARYSUB           shift, and go to state 17
    IDENTIFIER         shift, and go to state 63
    FALSE              shift, and go to state 23
    TRUE               shift, and go to state 24
    INT_LITERAL        shift, and go to state 25
    FLOAT_LITERAL      shift, and go to state 26
    CHARACTER_LITERAL  shift, and go to state 27

    additive_expression        go to state 124
    multiplicative_expression  go to state 49
    prefix_expression          go to state 50
    postfix_expression         go to state 51
    primary_expression         go to state 52
    literal                    go to state 53


State 90

   81 additive_expression: additive_expression PLUS • multiplicative_expression

    UNARYADD           shift, and go to state 16
    UNARYSUB           shift, and go to state 17
    IDENTIFIER         shift, and go to state 63
    FALSE              shift, and go to state 23
    TRUE               shift, and go to state 24
    INT_LITERAL        shift, and go to state 25
    FLOAT_LITERAL      shift, and go to state 26
    CHARACTER_LITERAL  shift, and go to state 27

    multiplicative_expression  go to state 125
    prefix_expression          go to state 50
    postfix_expression         go to state 51
    primary_expression         go to state 52
    literal                    go to state 53


State 91

   82 additive_expression: additive_expression SUBTRACT • multiplicative_expression

    UNARYADD           shift, and go to state 16
    UNARYSUB           shift, and go to state 17
    IDENTIFIER         shift, and go to state 63
    FALSE              shift, and go to state 23
    TRUE               shift, and go to state 24
    INT_LITERAL        shift, and go to state 25
    FLOAT_LITERAL      shift, and go to state 26
    CHARACTER_LITERAL  shift, and go to state 27

    multiplicative_expression  go to state 126
    prefix_expression          go to state 50
    postfix_expression         go to state 51
    primary_expression         go to state 52
    literal                    go to state 53


State 92

   84 multiplicative_expression: multiplicative_expression MULTIPLY • prefix_expression

    UNARYADD           shift, and go to state 16
    UNARYSUB           shift, and go to state 17
    IDENTIFIER         shift, and go to state 63
    FALSE              shift, and go to state 23
    TRUE               shift, and go to state 24
    INT_LITERAL        shift, and go to state 25
    FLOAT_LITERAL      shift, and go to state 26
    CHARACTER_LITERAL  shift, and go to state 27

    prefix_expression   go to state 127
    postfix_expression  go to state 51
    primary_expression  go to state 52
    literal             go to state 53


State 93

   85 multiplicative_expression: multiplicative_expression DIVIDE • prefix_expression

    UNARYADD           shift, and go to state 16
    UNARYSUB           shift, and go to state 17
    IDENTIFIER         shift, and go to state 63
    FALSE              shift, and go to state 23
    TRUE               shift, and go to state 24
    INT_LITERAL        shift, and go to state 25
    FLOAT_LITERAL      shift, and go to state 26
    CHARACTER_LITERAL  shift, and go to state 27

    prefix_expression   go to state 128
    postfix_expression  go to state 51
    primary_expression  go to state 52
    literal             go to state 53


State 94

   90 postfix_expression: postfix_expression UNARYADD •

    $default  reduce using rule 90 (postfix_expression)


State 95

   91 postfix_expression: postfix_expression UNARYSUB •

    $default  reduce using rule 91 (postfix_expression)


State 96

   24 variable: IDENTIFIER •
   25         | IDENTIFIER • ASSIGNOP assign_expression

    ASSIGNOP  shift, and go to state 112

    $default  reduce using rule 24 (variable)


State 97

   21 variable_declaration: CONST data_type variable_list • SEMICOLON
   23 variable_list: variable_list • COMMA variable

    SEMICOLON  shift, and go to state 129
    COMMA      shift, and go to state 115


State 98

   44 variable_declaration_list: variable_declaration •

    $default  reduce using rule 44 (variable_declaration_list)


State 99

   20 variable_declaration: data_type • variable_list SEMICOLON

    IDENTIFIER  shift, and go to state 96

    variable_list  go to state 77
    variable       go to state 78


State 100

   45 variable_declaration_list: variable_declaration_list • variable_declaration
   60 iteration_statement: FOR LPAREN variable_declaration_list • expression SEMICOLON expression RPAREN block_statement

    INT                shift, and go to state 2
    FLOAT              shift, and go to state 3
    CHAR               shift, and go to state 4
    BOOL               shift, and go to state 5
    STRING             shift, and go to state 6
    VOID               shift, and go to state 7
    CONST              shift, and go to state 8
    UNARYADD           shift, and go to state 16
    UNARYSUB           shift, and go to state 17
    IDENTIFIER         shift, and go to state 72
    FALSE              shift, and go to state 23
    TRUE               shift, and go to state 24
    INT_LITERAL        shift, and go to state 25
    FLOAT_LITERAL      shift, and go to state 26
    CHARACTER_LITERAL  shift, and go to state 27

    variable_declaration       go to state 130
    data_type                  go to state 99
    expression                 go to state 131
    assign_expression          go to state 43
    logical_or_expression      go to state 44
    logical_and_expression     go to state 45
    equality_expression        go to state 46
    relational_expression      go to state 47
    additive_expression        go to state 48
    multiplicative_expression  go to state 49
    prefix_expression          go to state 50
    postfix_expression         go to state 51
    primary_expression         go to state 52
    literal                    go to state 53


State 101

   48 matched_if_statement: IF LPAREN expression • RPAREN matched_if_statement ELSE matched_if_statement
   50 unmatched_if_statement: IF LPAREN expression • RPAREN block_statement
   51                       | IF LPAREN expression • RPAREN matched_if_statement ELSE unmatched_if_statement
   65 expression: expression • COMMA assign_expression

    COMMA   shift, and go to state 81
    RPAREN  shift, and go to state 132


State 102

   52 switch_statement: SWITCH LPAREN expression • RPAREN LCURLY case_list RCURLY
   65 expression: expression • COMMA assign_expression

    COMMA   shift, and go to state 81
    RPAREN  shift, and go to state 133


State 103

   59 iteration_statement: WHILE LPAREN expression • RPAREN block_statement
   65 expression: expression • COMMA assign_expression

    COMMA   shift, and go to state 81
    RPAREN  shift, and go to state 134


State 104

   61 iteration_statement: DO block_statement WHILE • LPAREN expression RPAREN SEMICOLON

    LPAREN  shift, and go to state 135


State 105

   16 block_statement: LCURLY statement_list RCURLY •

    $default  reduce using rule 16 (block_statement)


State 106

   19 statement_list: statement_list statement •

    $default  reduce using rule 19 (statement_list)


State 107

   32 enum_declaration: ENUM IDENTIFIER LCURLY • enum_values RCURLY SEMICOLON

    IDENTIFIER  shift, and go to state 136

    enum_values  go to state 137


State 108

   67 assign_expression: IDENTIFIER ASSIGNOP assign_expression •

    $default  reduce using rule 67 (assign_expression)


State 109

   62 function_call_statement: IDENTIFIER LPAREN function_call_expression • RPAREN SEMICOLON

    RPAREN  shift, and go to state 138


State 110

   64 function_call_expression: expression •
   65 expression: expression • COMMA assign_expression

    COMMA  shift, and go to state 81

    $default  reduce using rule 64 (function_call_expression)


State 111

   11 statement: RETURN expression SEMICOLON •

    $default  reduce using rule 11 (statement)


State 112

   25 variable: IDENTIFIER ASSIGNOP • assign_expression

    UNARYADD           shift, and go to state 16
    UNARYSUB           shift, and go to state 17
    IDENTIFIER         shift, and go to state 72
    FALSE              shift, and go to state 23
    TRUE               shift, and go to state 24
    INT_LITERAL        shift, and go to state 25
    FLOAT_LITERAL      shift, and go to state 26
    CHARACTER_LITERAL  shift, and go to state 27

    assign_expression          go to state 139
    logical_or_expression      go to state 44
    logical_and_expression     go to state 45
    equality_expression        go to state 46
    relational_expression      go to state 47
    additive_expression        go to state 48
    multiplicative_expression  go to state 49
    prefix_expression          go to state 50
    postfix_expression         go to state 51
    primary_expression         go to state 52
    literal                    go to state 53


State 113

   38 function_siganture: data_type IDENTIFIER LPAREN • parameter_list RPAREN

    INT     shift, and go to state 2
    FLOAT   shift, and go to state 3
    CHAR    shift, and go to state 4
    BOOL    shift, and go to state 5
    STRING  shift, and go to state 6
    VOID    shift, and go to state 7
    CONST   shift, and go to state 140

    $default  reduce using rule 39 (parameter_list)

    data_type              go to state 141
    parameter_list         go to state 142
    parameter_declaration  go to state 143


State 114

   20 variable_declaration: data_type variable_list SEMICOLON •

    $default  reduce using rule 20 (variable_declaration)


State 115

   23 variable_list: variable_list COMMA • variable

    IDENTIFIER  shift, and go to state 96

    variable  go to state 144


State 116

   65 expression: expression COMMA assign_expression •

    $default  reduce using rule 65 (expression)


State 117

   69 logical_or_expression: logical_or_expression OR logical_and_expression •
   71 logical_and_expression: logical_and_expression • AND equality_expression

    AND  shift, and go to state 83

    $default  reduce using rule 69 (logical_or_expression)


State 118

   71 logical_and_expression: logical_and_expression AND equality_expression •
   73 equality_expression: equality_expression • EQ relational_expression
   74                    | equality_expression • NE relational_expression

    EQ  shift, and go to state 84
    NE  shift, and go to state 85

    $default  reduce using rule 71 (logical_and_expression)


State 119

   73 equality_expression: equality_expression EQ relational_expression •
   76 relational_expression: relational_expression • LT additive_expression
   77                      | relational_expression • GT additive_expression
   78                      | relational_expression • LE additive_expression
   79                      | relational_expression • GE additive_expression

    LE  shift, and go to state 86
    GE  shift, and go to state 87
    GT  shift, and go to state 88
    LT  shift, and go to state 89

    $default  reduce using rule 73 (equality_expression)


State 120

   74 equality_expression: equality_expression NE relational_expression •
   76 relational_expression: relational_expression • LT additive_expression
   77                      | relational_expression • GT additive_expression
   78                      | relational_expression • LE additive_expression
   79                      | relational_expression • GE additive_expression

    LE  shift, and go to state 86
    GE  shift, and go to state 87
    GT  shift, and go to state 88
    LT  shift, and go to state 89

    $default  reduce using rule 74 (equality_expression)


State 121

   78 relational_expression: relational_expression LE additive_expression •
   81 additive_expression: additive_expression • PLUS multiplicative_expression
   82                    | additive_expression • SUBTRACT multiplicative_expression

    PLUS      shift, and go to state 90
    SUBTRACT  shift, and go to state 91

    $default  reduce using rule 78 (relational_expression)


State 122

   79 relational_expression: relational_expression GE additive_expression •
   81 additive_expression: additive_expression • PLUS multiplicative_expression
   82                    | additive_expression • SUBTRACT multiplicative_expression

    PLUS      shift, and go to state 90
    SUBTRACT  shift, and go to state 91

    $default  reduce using rule 79 (relational_expression)


State 123

   77 relational_expression: relational_expression GT additive_expression •
   81 additive_expression: additive_expression • PLUS multiplicative_expression
   82                    | additive_expression • SUBTRACT multiplicative_expression

    PLUS      shift, and go to state 90
    SUBTRACT  shift, and go to state 91

    $default  reduce using rule 77 (relational_expression)


State 124

   76 relational_expression: relational_expression LT additive_expression •
   81 additive_expression: additive_expression • PLUS multiplicative_expression
   82                    | additive_expression • SUBTRACT multiplicative_expression

    PLUS      shift, and go to state 90
    SUBTRACT  shift, and go to state 91

    $default  reduce using rule 76 (relational_expression)


State 125

   81 additive_expression: additive_expression PLUS multiplicative_expression •
   84 multiplicative_expression: multiplicative_expression • MULTIPLY prefix_expression
   85                          | multiplicative_expression • DIVIDE prefix_expression

    MULTIPLY  shift, and go to state 92
    DIVIDE    shift, and go to state 93

    $default  reduce using rule 81 (additive_expression)


State 126

   82 additive_expression: additive_expression SUBTRACT multiplicative_expression •
   84 multiplicative_expression: multiplicative_expression • MULTIPLY prefix_expression
   85                          | multiplicative_expression • DIVIDE prefix_expression

    MULTIPLY  shift, and go to state 92
    DIVIDE    shift, and go to state 93

    $default  reduce using rule 82 (additive_expression)


State 127

   84 multiplicative_expression: multiplicative_expression MULTIPLY prefix_expression •

    $default  reduce using rule 84 (multiplicative_expression)


State 128

   85 multiplicative_expression: multiplicative_expression DIVIDE prefix_expression •

    $default  reduce using rule 85 (multiplicative_expression)


State 129

   21 variable_declaration: CONST data_type variable_list SEMICOLON •

    $default  reduce using rule 21 (variable_declaration)


State 130

   45 variable_declaration_list: variable_declaration_list variable_declaration •

    $default  reduce using rule 45 (variable_declaration_list)


State 131

   60 iteration_statement: FOR LPAREN variable_declaration_list expression • SEMICOLON expression RPAREN block_statement
   65 expression: expression • COMMA assign_expression

    SEMICOLON  shift, and go to state 145
    COMMA      shift, and go to state 81


State 132

   48 matched_if_statement: IF LPAREN expression RPAREN • matched_if_statement ELSE matched_if_statement
   50 unmatched_if_statement: IF LPAREN expression RPAREN • block_statement
   51                       | IF LPAREN expression RPAREN • matched_if_statement ELSE unmatched_if_statement

    IF      shift, and go to state 146
    LCURLY  shift, and go to state 19

    block_statement       go to state 147
    matched_if_statement  go to state 148


State 133

   52 switch_statement: SWITCH LPAREN expression RPAREN • LCURLY case_list RCURLY

    LCURLY  shift, and go to state 149


State 134

   59 iteration_statement: WHILE LPAREN expression RPAREN • block_statement

    LCURLY  shift, and go to state 19

    block_statement  go to state 150


State 135

   61 iteration_statement: DO block_statement WHILE LPAREN • expression RPAREN SEMICOLON

    UNARYADD           shift, and go to state 16
    UNARYSUB           shift, and go to state 17
    IDENTIFIER         shift, and go to state 72
    FALSE              shift, and go to state 23
    TRUE               shift, and go to state 24
    INT_LITERAL        shift, and go to state 25
    FLOAT_LITERAL      shift, and go to state 26
    CHARACTER_LITERAL  shift, and go to state 27

    expression                 go to state 151
    assign_expression          go to state 43
    logical_or_expression      go to state 44
    logical_and_expression     go to state 45
    equality_expression        go to state 46
    relational_expression      go to state 47
    additive_expression        go to state 48
    multiplicative_expression  go to state 49
    prefix_expression          go to state 50
    postfix_expression         go to state 51
    primary_expression         go to state 52
    literal                    go to state 53


State 136

   33 enum_values: IDENTIFIER •
   34            | IDENTIFIER • ASSIGNOP literal

    ASSIGNOP  shift, and go to state 152

    $default  reduce using rule 33 (enum_values)


State 137

   32 enum_declaration: ENUM IDENTIFIER LCURLY enum_values • RCURLY SEMICOLON
   35 enum_values: enum_values • COMMA IDENTIFIER
   36            | enum_values • COMMA IDENTIFIER ASSIGNOP literal

    COMMA   shift, and go to state 153
    RCURLY  shift, and go to state 154


State 138

   62 function_call_statement: IDENTIFIER LPAREN function_call_expression RPAREN • SEMICOLON

    SEMICOLON  shift, and go to state 155


State 139

   25 variable: IDENTIFIER ASSIGNOP assign_expression •

    $default  reduce using rule 25 (variable)


State 140

   43 parameter_declaration: CONST • data_type IDENTIFIER

    INT     shift, and go to state 2
    FLOAT   shift, and go to state 3
    CHAR    shift, and go to state 4
    BOOL    shift, and go to state 5
    STRING  shift, and go to state 6
    VOID    shift, and go to state 7

    data_type  go to state 156


State 141

   42 parameter_declaration: data_type • IDENTIFIER

    IDENTIFIER  shift, and go to state 157


State 142

   38 function_siganture: data_type IDENTIFIER LPAREN parameter_list • RPAREN

    RPAREN  shift, and go to state 158


State 143

   40 parameter_list: parameter_declaration •
   41               | parameter_declaration • COMMA parameter_list

    COMMA  shift, and go to state 159

    $default  reduce using rule 40 (parameter_list)


State 144

   23 variable_list: variable_list COMMA variable •

    $default  reduce using rule 23 (variable_list)


State 145

   60 iteration_statement: FOR LPAREN variable_declaration_list expression SEMICOLON • expression RPAREN block_statement

    UNARYADD           shift, and go to state 16
    UNARYSUB           shift, and go to state 17
    IDENTIFIER         shift, and go to state 72
    FALSE              shift, and go to state 23
    TRUE               shift, and go to state 24
    INT_LITERAL        shift, and go to state 25
    FLOAT_LITERAL      shift, and go to state 26
    CHARACTER_LITERAL  shift, and go to state 27

    expression                 go to state 160
    assign_expression          go to state 43
    logical_or_expression      go to state 44
    logical_and_expression     go to state 45
    equality_expression        go to state 46
    relational_expression      go to state 47
    additive_expression        go to state 48
    multiplicative_expression  go to state 49
    prefix_expression          go to state 50
    postfix_expression         go to state 51
    primary_expression         go to state 52
    literal                    go to state 53


State 146

   48 matched_if_statement: IF • LPAREN expression RPAREN matched_if_statement ELSE matched_if_statement

    LPAREN  shift, and go to state 161


State 147

   49 matched_if_statement: block_statement •
   50 unmatched_if_statement: IF LPAREN expression RPAREN block_statement •

    ELSE      reduce using rule 49 (matched_if_statement)
    $default  reduce using rule 50 (unmatched_if_statement)


State 148

   48 matched_if_statement: IF LPAREN expression RPAREN matched_if_statement • ELSE matched_if_statement
   51 unmatched_if_statement: IF LPAREN expression RPAREN matched_if_statement • ELSE unmatched_if_statement

    ELSE  shift, and go to state 162


State 149

   52 switch_statement: SWITCH LPAREN expression RPAREN LCURLY • case_list RCURLY

    CASE     shift, and go to state 163
    DEFAULT  shift, and go to state 164

    case_statement     go to state 165
    default_statement  go to state 166
    case_list          go to state 167


State 150

   59 iteration_statement: WHILE LPAREN expression RPAREN block_statement •

    $default  reduce using rule 59 (iteration_statement)


State 151

   61 iteration_statement: DO block_statement WHILE LPAREN expression • RPAREN SEMICOLON
   65 expression: expression • COMMA assign_expression

    COMMA   shift, and go to state 81
    RPAREN  shift, and go to state 168


State 152

   34 enum_values: IDENTIFIER ASSIGNOP • literal

    FALSE              shift, and go to state 23
    TRUE               shift, and go to state 24
    INT_LITERAL        shift, and go to state 25
    FLOAT_LITERAL      shift, and go to state 26
    CHARACTER_LITERAL  shift, and go to state 27

    literal  go to state 169


State 153

   35 enum_values: enum_values COMMA • IDENTIFIER
   36            | enum_values COMMA • IDENTIFIER ASSIGNOP literal

    IDENTIFIER  shift, and go to state 170


State 154

   32 enum_declaration: ENUM IDENTIFIER LCURLY enum_values RCURLY • SEMICOLON

    SEMICOLON  shift, and go to state 171


State 155

   62 function_call_statement: IDENTIFIER LPAREN function_call_expression RPAREN SEMICOLON •

    $default  reduce using rule 62 (function_call_statement)


State 156

   43 parameter_declaration: CONST data_type • IDENTIFIER

    IDENTIFIER  shift, and go to state 172


State 157

   42 parameter_declaration: data_type IDENTIFIER •

    $default  reduce using rule 42 (parameter_declaration)


State 158

   38 function_siganture: data_type IDENTIFIER LPAREN parameter_list RPAREN •

    $default  reduce using rule 38 (function_siganture)


State 159

   41 parameter_list: parameter_declaration COMMA • parameter_list

    INT     shift, and go to state 2
    FLOAT   shift, and go to state 3
    CHAR    shift, and go to state 4
    BOOL    shift, and go to state 5
    STRING  shift, and go to state 6
    VOID    shift, and go to state 7
    CONST   shift, and go to state 140

    $default  reduce using rule 39 (parameter_list)

    data_type              go to state 141
    parameter_list         go to state 173
    parameter_declaration  go to state 143


State 160

   60 iteration_statement: FOR LPAREN variable_declaration_list expression SEMICOLON expression • RPAREN block_statement
   65 expression: expression • COMMA assign_expression

    COMMA   shift, and go to state 81
    RPAREN  shift, and go to state 174


State 161

   48 matched_if_statement: IF LPAREN • expression RPAREN matched_if_statement ELSE matched_if_statement

    UNARYADD           shift, and go to state 16
    UNARYSUB           shift, and go to state 17
    IDENTIFIER         shift, and go to state 72
    FALSE              shift, and go to state 23
    TRUE               shift, and go to state 24
    INT_LITERAL        shift, and go to state 25
    FLOAT_LITERAL      shift, and go to state 26
    CHARACTER_LITERAL  shift, and go to state 27

    expression                 go to state 175
    assign_expression          go to state 43
    logical_or_expression      go to state 44
    logical_and_expression     go to state 45
    equality_expression        go to state 46
    relational_expression      go to state 47
    additive_expression        go to state 48
    multiplicative_expression  go to state 49
    prefix_expression          go to state 50
    postfix_expression         go to state 51
    primary_expression         go to state 52
    literal                    go to state 53


State 162

   48 matched_if_statement: IF LPAREN expression RPAREN matched_if_statement ELSE • matched_if_statement
   51 unmatched_if_statement: IF LPAREN expression RPAREN matched_if_statement ELSE • unmatched_if_statement

    IF      shift, and go to state 10
    LCURLY  shift, and go to state 19

    block_statement         go to state 30
    matched_if_statement    go to state 176
    unmatched_if_statement  go to state 177


State 163

   53 case_statement: CASE • expression COLON statement_list

    UNARYADD           shift, and go to state 16
    UNARYSUB           shift, and go to state 17
    IDENTIFIER         shift, and go to state 72
    FALSE              shift, and go to state 23
    TRUE               shift, and go to state 24
    INT_LITERAL        shift, and go to state 25
    FLOAT_LITERAL      shift, and go to state 26
    CHARACTER_LITERAL  shift, and go to state 27

    expression                 go to state 178
    assign_expression          go to state 43
    logical_or_expression      go to state 44
    logical_and_expression     go to state 45
    equality_expression        go to state 46
    relational_expression      go to state 47
    additive_expression        go to state 48
    multiplicative_expression  go to state 49
    prefix_expression          go to state 50
    postfix_expression         go to state 51
    primary_expression         go to state 52
    literal                    go to state 53


State 164

   54 default_statement: DEFAULT • COLON statement_list

    COLON  shift, and go to state 179


State 165

   57 case_list: case_statement •

    $default  reduce using rule 57 (case_list)


State 166

   58 case_list: default_statement •

    $default  reduce using rule 58 (case_list)


State 167

   52 switch_statement: SWITCH LPAREN expression RPAREN LCURLY case_list • RCURLY
   55 case_list: case_list • case_statement
   56          | case_list • default_statement

    CASE     shift, and go to state 163
    DEFAULT  shift, and go to state 164
    RCURLY   shift, and go to state 180

    case_statement     go to state 181
    default_statement  go to state 182


State 168

   61 iteration_statement: DO block_statement WHILE LPAREN expression RPAREN • SEMICOLON

    SEMICOLON  shift, and go to state 183


State 169

   34 enum_values: IDENTIFIER ASSIGNOP literal •

    $default  reduce using rule 34 (enum_values)


State 170

   35 enum_values: enum_values COMMA IDENTIFIER •
   36            | enum_values COMMA IDENTIFIER • ASSIGNOP literal

    ASSIGNOP  shift, and go to state 184

    $default  reduce using rule 35 (enum_values)


State 171

   32 enum_declaration: ENUM IDENTIFIER LCURLY enum_values RCURLY SEMICOLON •

    $default  reduce using rule 32 (enum_declaration)


State 172

   43 parameter_declaration: CONST data_type IDENTIFIER •

    $default  reduce using rule 43 (parameter_declaration)


State 173

   41 parameter_list: parameter_declaration COMMA parameter_list •

    $default  reduce using rule 41 (parameter_list)


State 174

   60 iteration_statement: FOR LPAREN variable_declaration_list expression SEMICOLON expression RPAREN • block_statement

    LCURLY  shift, and go to state 19

    block_statement  go to state 185


State 175

   48 matched_if_statement: IF LPAREN expression • RPAREN matched_if_statement ELSE matched_if_statement
   65 expression: expression • COMMA assign_expression

    COMMA   shift, and go to state 81
    RPAREN  shift, and go to state 186


State 176

   48 matched_if_statement: IF LPAREN expression RPAREN matched_if_statement ELSE matched_if_statement •

    $default  reduce using rule 48 (matched_if_statement)


State 177

   51 unmatched_if_statement: IF LPAREN expression RPAREN matched_if_statement ELSE unmatched_if_statement •

    $default  reduce using rule 51 (unmatched_if_statement)


State 178

   53 case_statement: CASE expression • COLON statement_list
   65 expression: expression • COMMA assign_expression

    COLON  shift, and go to state 187
    COMMA  shift, and go to state 81


State 179

   54 default_statement: DEFAULT COLON • statement_list

    INT                shift, and go to state 2
    FLOAT              shift, and go to state 3
    CHAR               shift, and go to state 4
    BOOL               shift, and go to state 5
    STRING             shift, and go to state 6
    VOID               shift, and go to state 7
    CONST              shift, and go to state 8
    FOR                shift, and go to state 9
    IF                 shift, and go to state 10
    SWITCH             shift, and go to state 11
    WHILE              shift, and go to state 12
    DO                 shift, and go to state 13
    CONTINUE           shift, and go to state 14
    BREAK              shift, and go to state 15
    UNARYADD           shift, and go to state 16
    UNARYSUB           shift, and go to state 17
    SEMICOLON          shift, and go to state 18
    LCURLY             shift, and go to state 19
    ENUM               shift, and go to state 20
    IDENTIFIER         shift, and go to state 21
    RETURN             shift, and go to state 22
    FALSE              shift, and go to state 23
    TRUE               shift, and go to state 24
    INT_LITERAL        shift, and go to state 25
    FLOAT_LITERAL      shift, and go to state 26
    CHARACTER_LITERAL  shift, and go to state 27

    statement                  go to state 67
    block_statement            go to state 30
    statement_list             go to state 188
    variable_declaration       go to state 31
    data_type                  go to state 32
    enum_declaration           go to state 33
    function_declaration       go to state 34
    function_siganture         go to state 35
    if_statement               go to state 36
    matched_if_statement       go to state 37
    unmatched_if_statement     go to state 38
    switch_statement           go to state 39
    iteration_statement        go to state 40
    function_call_statement    go to state 41
    expression                 go to state 42
    assign_expression          go to state 43
    logical_or_expression      go to state 44
    logical_and_expression     go to state 45
    equality_expression        go to state 46
    relational_expression      go to state 47
    additive_expression        go to state 48
    multiplicative_expression  go to state 49
    prefix_expression          go to state 50
    postfix_expression         go to state 51
    primary_expression         go to state 52
    literal                    go to state 53


State 180

   52 switch_statement: SWITCH LPAREN expression RPAREN LCURLY case_list RCURLY •

    $default  reduce using rule 52 (switch_statement)


State 181

   55 case_list: case_list case_statement •

    $default  reduce using rule 55 (case_list)


State 182

   56 case_list: case_list default_statement •

    $default  reduce using rule 56 (case_list)


State 183

   61 iteration_statement: DO block_statement WHILE LPAREN expression RPAREN SEMICOLON •

    $default  reduce using rule 61 (iteration_statement)


State 184

   36 enum_values: enum_values COMMA IDENTIFIER ASSIGNOP • literal

    FALSE              shift, and go to state 23
    TRUE               shift, and go to state 24
    INT_LITERAL        shift, and go to state 25
    FLOAT_LITERAL      shift, and go to state 26
    CHARACTER_LITERAL  shift, and go to state 27

    literal  go to state 189


State 185

   60 iteration_statement: FOR LPAREN variable_declaration_list expression SEMICOLON expression RPAREN block_statement •

    $default  reduce using rule 60 (iteration_statement)


State 186

   48 matched_if_statement: IF LPAREN expression RPAREN • matched_if_statement ELSE matched_if_statement

    IF      shift, and go to state 146
    LCURLY  shift, and go to state 19

    block_statement       go to state 30
    matched_if_statement  go to state 190


State 187

   53 case_statement: CASE expression COLON • statement_list

    INT                shift, and go to state 2
    FLOAT              shift, and go to state 3
    CHAR               shift, and go to state 4
    BOOL               shift, and go to state 5
    STRING             shift, and go to state 6
    VOID               shift, and go to state 7
    CONST              shift, and go to state 8
    FOR                shift, and go to state 9
    IF                 shift, and go to state 10
    SWITCH             shift, and go to state 11
    WHILE              shift, and go to state 12
    DO                 shift, and go to state 13
    CONTINUE           shift, and go to state 14
    BREAK              shift, and go to state 15
    UNARYADD           shift, and go to state 16
    UNARYSUB           shift, and go to state 17
    SEMICOLON          shift, and go to state 18
    LCURLY             shift, and go to state 19
    ENUM               shift, and go to state 20
    IDENTIFIER         shift, and go to state 21
    RETURN             shift, and go to state 22
    FALSE              shift, and go to state 23
    TRUE               shift, and go to state 24
    INT_LITERAL        shift, and go to state 25
    FLOAT_LITERAL      shift, and go to state 26
    CHARACTER_LITERAL  shift, and go to state 27

    statement                  go to state 67
    block_statement            go to state 30
    statement_list             go to state 191
    variable_declaration       go to state 31
    data_type                  go to state 32
    enum_declaration           go to state 33
    function_declaration       go to state 34
    function_siganture         go to state 35
    if_statement               go to state 36
    matched_if_statement       go to state 37
    unmatched_if_statement     go to state 38
    switch_statement           go to state 39
    iteration_statement        go to state 40
    function_call_statement    go to state 41
    expression                 go to state 42
    assign_expression          go to state 43
    logical_or_expression      go to state 44
    logical_and_expression     go to state 45
    equality_expression        go to state 46
    relational_expression      go to state 47
    additive_expression        go to state 48
    multiplicative_expression  go to state 49
    prefix_expression          go to state 50
    postfix_expression         go to state 51
    primary_expression         go to state 52
    literal                    go to state 53


State 188

   19 statement_list: statement_list • statement
   54 default_statement: DEFAULT COLON statement_list •

    INT                shift, and go to state 2
    FLOAT              shift, and go to state 3
    CHAR               shift, and go to state 4
    BOOL               shift, and go to state 5
    STRING             shift, and go to state 6
    VOID               shift, and go to state 7
    CONST              shift, and go to state 8
    FOR                shift, and go to state 9
    IF                 shift, and go to state 10
    SWITCH             shift, and go to state 11
    WHILE              shift, and go to state 12
    DO                 shift, and go to state 13
    CONTINUE           shift, and go to state 14
    BREAK              shift, and go to state 15
    UNARYADD           shift, and go to state 16
    UNARYSUB           shift, and go to state 17
    SEMICOLON          shift, and go to state 18
    LCURLY             shift, and go to state 19
    ENUM               shift, and go to state 20
    IDENTIFIER         shift, and go to state 21
    RETURN             shift, and go to state 22
    FALSE              shift, and go to state 23
    TRUE               shift, and go to state 24
    INT_LITERAL        shift, and go to state 25
    FLOAT_LITERAL      shift, and go to state 26
    CHARACTER_LITERAL  shift, and go to state 27

    $default  reduce using rule 54 (default_statement)

    statement                  go to state 106
    block_statement            go to state 30
    variable_declaration       go to state 31
    data_type                  go to state 32
    enum_declaration           go to state 33
    function_declaration       go to state 34
    function_siganture         go to state 35
    if_statement               go to state 36
    matched_if_statement       go to state 37
    unmatched_if_statement     go to state 38
    switch_statement           go to state 39
    iteration_statement        go to state 40
    function_call_statement    go to state 41
    expression                 go to state 42
    assign_expression          go to state 43
    logical_or_expression      go to state 44
    logical_and_expression     go to state 45
    equality_expression        go to state 46
    relational_expression      go to state 47
    additive_expression        go to state 48
    multiplicative_expression  go to state 49
    prefix_expression          go to state 50
    postfix_expression         go to state 51
    primary_expression         go to state 52
    literal                    go to state 53


State 189

   36 enum_values: enum_values COMMA IDENTIFIER ASSIGNOP literal •

    $default  reduce using rule 36 (enum_values)


State 190

   48 matched_if_statement: IF LPAREN expression RPAREN matched_if_statement • ELSE matched_if_statement

    ELSE  shift, and go to state 192


State 191

   19 statement_list: statement_list • statement
   53 case_statement: CASE expression COLON statement_list •

    INT                shift, and go to state 2
    FLOAT              shift, and go to state 3
    CHAR               shift, and go to state 4
    BOOL               shift, and go to state 5
    STRING             shift, and go to state 6
    VOID               shift, and go to state 7
    CONST              shift, and go to state 8
    FOR                shift, and go to state 9
    IF                 shift, and go to state 10
    SWITCH             shift, and go to state 11
    WHILE              shift, and go to state 12
    DO                 shift, and go to state 13
    CONTINUE           shift, and go to state 14
    BREAK              shift, and go to state 15
    UNARYADD           shift, and go to state 16
    UNARYSUB           shift, and go to state 17
    SEMICOLON          shift, and go to state 18
    LCURLY             shift, and go to state 19
    ENUM               shift, and go to state 20
    IDENTIFIER         shift, and go to state 21
    RETURN             shift, and go to state 22
    FALSE              shift, and go to state 23
    TRUE               shift, and go to state 24
    INT_LITERAL        shift, and go to state 25
    FLOAT_LITERAL      shift, and go to state 26
    CHARACTER_LITERAL  shift, and go to state 27

    $default  reduce using rule 53 (case_statement)

    statement                  go to state 106
    block_statement            go to state 30
    variable_declaration       go to state 31
    data_type                  go to state 32
    enum_declaration           go to state 33
    function_declaration       go to state 34
    function_siganture         go to state 35
    if_statement               go to state 36
    matched_if_statement       go to state 37
    unmatched_if_statement     go to state 38
    switch_statement           go to state 39
    iteration_statement        go to state 40
    function_call_statement    go to state 41
    expression                 go to state 42
    assign_expression          go to state 43
    logical_or_expression      go to state 44
    logical_and_expression     go to state 45
    equality_expression        go to state 46
    relational_expression      go to state 47
    additive_expression        go to state 48
    multiplicative_expression  go to state 49
    prefix_expression          go to state 50
    postfix_expression         go to state 51
    primary_expression         go to state 52
    literal                    go to state 53


State 192

   48 matched_if_statement: IF LPAREN expression RPAREN matched_if_statement ELSE • matched_if_statement

    IF      shift, and go to state 146
    LCURLY  shift, and go to state 19

    block_statement       go to state 30
    matched_if_statement  go to state 176
